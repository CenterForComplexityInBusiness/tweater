MYSQL INSTALLATION AND USE

If you are using a MySQL version before 5.5, open up the "setup-mysql" script and find the line near the top that says:

VERSION_5_5_OR_LATER = True

And change it to:

VERSION_5_5_OR_LATER = False

If you're using MySQL 5.5 or later, you don't have to change anything!

Now we run that script to generate our MySQL database setup script:

$ ./setup-mysql

Follow the prompts therein, and then run the "mysql" command it tells you to. This will set up the database. The makesql.py script will also produce a file called "<dbname>.properties" where <dbname> is the name of your database. We will use this file name in the following steps.

Next, log in to Twitter using a web browser on the local machine. Then run the following, replacing <dbname> with your database name

$ ./setup <dbname>.properties

This will prompt you to authorize the TwEater application with your Twitter account, and will save an access token to use with your account in the future.

To generate a default TwEater configuration file, run:

$ ./tweater prop > tweater.properties

You can then cut-and-paste the database-specific properties in the <dbname>.properties file created earlier into this configuration file.

You will need to insert data into some of the MySQL tables to define your query. You can do this manually, or the "query-mysql" script can interpret a CSV file of a particular format. See the "examples/query.csv" file and QUERY.README for details.

Please note that, as of this writing, Twitter limits you to 400 combined track/phrase entries active at a given time and 5000 user follows at a time. If you need to know user IDs but only have usernames, please see: http://userfromid.com/

If you want to receive an email notifications of serious TwEater errors, edit the tweater.properties file by uncommenting the lines containing "tweater.mail.*" and filling in the appropriate SMTP server and email addresses.

You'll be on your way after you run:

$ ./tweater start tweater.properties &

Take a look at the most recent tweater.log.* directly after this command. It should show you the current query. Whenever the query changes, the new query will get printed to this file (and it will also show additions/deletions from the previous query). This file will also contain a log of any errors that occur.

Now that data collection has begun, you can keep track of what's happening using:

$ ./tweater list

This will show the list of running TwEater instances, the names of their log files, the number of tweets they have queued for processing, and the percentage of their available resources that each is using. The numbers in the left column of this list are used to refer to a specific TwEater instance at the command line. For example:

$ ./tweater stop 1

This will instruct the first running TwEater instance to stop collecting data (though it will continue to process and save tweets that it already has queued; when the queue is empty the process will exit and will be removed from the output of the "list" command).

