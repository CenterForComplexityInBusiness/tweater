QUERY TYPES

TwEater offers three kinds of queries that you can use: track, phrase, and follow. You can have up to 400 total track/phrase queries running at once, and up to 5000 follow queries in addition to those. Queries will never return tweets from protected users.

Track Queries:
A track query is a case-insensitive bag-of-words query, meaning that to match it, a tweet must contain ALL the words you specify, but ordering does not matter. A word, for our purposes, is a token delimited by whitespace, so when specifying a track query for TwEater, assume that the string you submit will be split based on whitespace and the remaining tokens will be the words that constitute your query. See the section below on query construction for caveats about what constitutes a word on Twitter's end.

Phrase Queries:
A phrase query is a case-insensitive exact string match that may include whitespace. Only tweets that contain the entire, exact string will match this kind of query.

Follow Queries:
For a follow query you must specify the user ID of a single Twitter user. A follow query for user ID 123 will return all tweets that user 123 publishes after the query was launched, which includes replies from user 123 to others and retweets that 123 makes of other users' tweets. It also contains any direct "official" replies to user 123 or any "official" retweets of user 123. The query will NOT return "manual" mentions of, replies to, or retweets of user 123; this is a limitation of the Twitter Streaming API (see https://dev.twitter.com/docs/streaming-apis/parameters#follow for more information). If you want to find these missing tweets, you should issue a track query on the "@username". The only downside to this strategy is that you are limited to 400 such track queries instead of the 5000-limit for follow queries. If you have the username and need the ID (i.e. a number), try this site: http://idfromuser.com/

Location Queries:
For a location query you must specify a bounding-box of two (longitude, latitude) points, with the first point being the south-west extent of the box. This will return all tweets with geo-tags or place tags within the given bounding-box. (see https://dev.twitter.com/docs/streaming-apis/parameters#locations for more information).

QUERY CONSTRUCTION

Twitter queries are case-INsensitive and are specified as sets of whitespace-separated keywords, ALL of much must be present in a tweet for it to be sent to you. Twitter does not support phrases of whitespace-separated keywords, but TwEater adds this functionality by submitting a normal query and discarding any tweets sent back that do not match the phrase in full. Thus, one must make sure that phrase queries, when construed as keywords-anywhere queries by Twitter, are not too broad, and would in fact return tweets containing the phrase in question, as detailed below.

When considering keywords-anywhere queries, Twitter does NOT simply do substring matching on tweets. Instead, they break each tweet up based on whitespace and put them into a hashtable so they can ask questions like "is X in the tweet?" where X is a specific, exact keyword.

Thus, queries you specify are broken up into keywords based on whitespace, and Twitter searches for tweets with each keyword individually. For example, if your query is "odoyle rules", Twitter determines whether to send a given tweet to you by asking if it contains "odoyle", and if it does, then asking whether it also contains "rules". If it contains both, the tweet gets sent to you. So for the track query (i.e. keywords anywhere in a tweet, in any order) "odoyle rules":

"Odoyle rules ... heh heh ... Love that movie." matches;
"Hey Odoyle, check out the new rules posted at the gym" matches;
"Check out those rules... They're going to be tough for ODoyle!" also matches;
"Class, here are the new rules" does not match.

Note that ONLY EXACT keyword matches are returned. There is no substring matching or stemming. Thus:

"glodoyle rules!" does not match, even though "odoyle" is a substring of "glodoyle";
"odoyle drules!" also does not match, even though "rules" is a substring of "drules".

If the query was something simpler like "read", then:

"Whoa I need to read my homework!" matches;
"Busy reading homework" does not match, even though "read" is a substring of "reading";
"Who reads this shit?" does not match, even though "read" is a substring of "reads".

Thus, if you want all forms of "read", you need to specify separate queries for "read", "reads", "reading", etc.

The only known exception to the "no substring matching" rules is for punctuation:

Query "read" matches tweets "@read", "#read", and "read!", but not "reads" or "@reading" or "reader!".

This is because, in their database, Twitter lists any token with punctuation twice: Once as an exact match (e.g. "#rules!") and once with the punctuation stripped (e.g. "rules"). Thus, if you use keywords without punctuation, you should pick up everything. On the other hand, if you use a query with punctuation, you only get the exact punctuation matches:

Query "m&ms" matches tweet "m&ms" but not "m!ms" or "mms";
On the other hand, query "mms" should get all of the above.

Query "#geek<3" matches tweet "#geek<3" but not "geek<3" or "geek3" or "#geek3";
On the other hand, query "geek3" should get all of the above.
